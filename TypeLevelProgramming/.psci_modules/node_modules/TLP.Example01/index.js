"use strict";
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Class_Console = require("../Effect.Class.Console/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Prelude = require("../Prelude/index.js");

// A Symbol is a key and Type is
// This is a typeclass at type level. 
var RowToList = {};

// How to write an instance of this?
// instance rowToListNil :: RowToList () Nil
// instance rowToListSingle :: RowToList (a :: A) (Cons "a" A Nil)
// instance rowToListDouble  :: RowToList (a :: A, b :: B) (Cons "b" A (Cons "b" B Nil))
// instance rowToListTriple :: RowToList (a :: A, b :: B, c :: C) (Cons "c" C (Cons "b" B (Const "a" A Nil)))
// Reverse of List to row
var ListToRow = {};

// What is the use of this step?
// Why is the compiler not able to find RowCons?
// instance listToRowCons :: (ListToRow tail tailRow, RowCons label ty tailRow row ) => ListToRow (Cons label ty tail) row
// | Example of RowCons
// applyRecord :: forall io i o. ApplyRecord io i o => Record io -> Record i -> Record o
var ApplyRecord = {};
var ApplyRowList = {};
var mainRunTime = Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Data_Show.showInt)(Data_Maybe.fromJust()(new Data_Maybe.Just(3)));

// Prim library
// Function
// Core Data Structures
// Array
// Record
// Core data types
// Number
// Int
// String
// Char
// Boolean
// Partial - We will look into this
// Is Partial a type classes
// Are there typeclasses which don't take parameters
var mainCompileTime = function (dictPartial) {
    return Effect_Class_Console.logShow(Effect_Class.monadEffectEffect)(Data_Show.showInt)(Data_Maybe.fromJust(dictPartial)(new Data_Maybe.Just(3)));
};
var listToRowNil = ListToRow;

// Everything on left as RowToList.
// ApplyRowList is the center
// ListToRow is on the right
var applyRecordImpl = function (dictRowToList) {
    return function (dictRowToList1) {
        return function (dictRowToList2) {
            return function (dictApplyRowList) {
                return function (dictListToRow) {
                    return function (dictListToRow1) {
                        return function (dictListToRow2) {
                            return ApplyRecord;
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    mainCompileTime: mainCompileTime,
    mainRunTime: mainRunTime,
    RowToList: RowToList,
    ListToRow: ListToRow,
    ApplyRecord: ApplyRecord,
    ApplyRowList: ApplyRowList,
    listToRowNil: listToRowNil,
    applyRecordImpl: applyRecordImpl
};
